module ram_mode (
    input clk,              // 100MHz clock
    input rst,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    output io_led[3][8],    // LEDs on IO Shield
    output io_segment[8],   // 7-segment LEDs on IO Shield
    output io_select[4],    // Digit select on IO Shield
    input io_button[5],     // 4 buttons on IO Shield
    input io_dip[3][8],      // DIP switches on IO Shield
    
    // to matrix. See custom.acf for pins
    output red0,
    output green0, 
    output blue0,
    output red1,
    output green1,
    output blue1,
    output latch, 
    output blank, // also known as oe
    output sclk_out,
    output address[5] // row address current write to LED matrix
) {
    
    
    
    const CLK_FREQ = $is_sim() ? 1000 : 100000000
    
    .clk(clk) {
        
        edge_detector reload_button_edge_detector(#RISE(1), #FALL(0))
        button_conditioner reload_button_cond(#CLK_FREQ(CLK_FREQ))
        button_conditioner color_button_conditioner[3](#CLK_FREQ(3x{{CLK_FREQ}}),.in({io_button[3],io_button[1], io_button[2]}))
        edge_detector color_button_edge_detector[3](#RISE(3x{{1}}), #FALL(3x{{0}}), .in(color_button_conditioner.out))
        .rst(rst){
            // ramwriter ---> matrixram ---> driver ---> hardware
            rgb_led_matrix_driver driver
            ram_writer ramwriter(#DATA_WIDTH(16))
            matrix_ram matrixram
            
            dff red_triangle[16](#INIT(0))
            dff green_triangle[16](#INIT(0))
            dff blue_triangle[16](#INIT(0))
            
        }
        
    }
    
    always {
        
        led = 8h00             // turn LEDs off
        
        io_led = 3x{{8h00}}    // turn LEDs off
        io_segment = 8hff          // turn segments off
        io_select = 4hf           // select no digits
        
        red_triangle.d = red_triangle.q 
        green_triangle.d = green_triangle.q 
        blue_triangle.d = blue_triangle.q
        
        if (color_button_edge_detector.out[0]){
            // io_button[2] sets red triangle 
            red_triangle.d = c{io_dip[1], io_dip[0]}
        }
        if (color_button_edge_detector.out[1]){
            // io_button[1] sets green triangle 
            green_triangle.d = c{io_dip[1], io_dip[0]}
        }
        if (color_button_edge_detector.out[2]){
            // io_button[3] sets blue triangle 
            blue_triangle.d = c{io_dip[1], io_dip[0]}
        }
        
        
        
        // ------ CUSTOM DATA LOADING, prepare some data to be loaded to matrix_ram ------- // 
        // connect ramwriter to matrixram to load it with some pixel values 
        reload_button_cond.in = io_button[0] // this button reloads new value from io_dip
        reload_button_edge_detector.in = reload_button_cond.out
        
        // when io_button[0] is pressed, we reload the new data in
        ramwriter.reload = reload_button_edge_detector.out 
        ramwriter.new_data = {blue_triangle.q, green_triangle.q, red_triangle.q} 
        
        matrixram.row_address_top = ramwriter.row_address_top
        matrixram.col_address_top = ramwriter.col_address_top
        matrixram.we_top = ramwriter.we_top
        matrixram.wd_top = ramwriter.wd_top
        
        matrixram.row_address_btm = ramwriter.row_address_btm
        matrixram.col_address_btm = ramwriter.col_address_btm
        matrixram.we_btm = ramwriter.we_btm
        matrixram.wd_btm = ramwriter.wd_btm
        
        matrixram.ready = ramwriter.ready
        
        matrixram.row_address = driver.row_index
        matrixram.col_address = driver.col_index
        
        // connect matrixram with matrixwriter to push the pixel values out to the matrix
        driver.data = c{matrixram.bottom_out, matrixram.top_out}
        // ------ END of CUSTOM data LOADING ------- // 
        
        red0 = driver.red0
        red1 = driver.red1
        green0 = driver.green0
        green1 = driver.green1
        blue0 = driver.blue0
        blue1 = driver.blue1
        latch = driver.latch
        sclk_out = driver.sclk_out
        blank = driver.blank
        address = driver.address
        
        led[3:0] = driver.address
        led[7] = driver.sclk_out
        io_led[0][0] = driver.red0
        io_led[0][1] = driver.green0
        io_led[0][2] = driver.blue0
        io_led[0][3] = driver.red1
        io_led[0][4] = driver.green1
        io_led[0][5] = driver.blue1
        
        io_led[0][2:0] = matrixram.top_out
        io_led[0][5:3] = matrixram.bottom_out
        
        io_led[1][3:0] = driver.address
        io_led[2] = driver.debug
        
    }
}